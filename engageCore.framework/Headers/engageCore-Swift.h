// Generated by Apple Swift version 2.3 (swiftlang-800.10.13 clang-800.0.42.1)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import Foundation;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class UIApplication;
@class Traits;
@class NSData;
@class NotificationData;

SWIFT_CLASS("_TtC10engageCore6Engage")
@interface Engage : NSObject

/// Set the debug value as true to print all useful informations in console.
+ (BOOL)debug;
+ (void)setDebug:(BOOL)value;

/// Initialize the engage SDK in the client application.
///
/// \param application UIApplication Instance
///
/// \param clientId ENGAGE_CLIENT_ID
///
/// \param projectId ENGAGE_PROJECT_ID
+ (void)initialize:(UIApplication * _Nonnull)application didFinishLaunchingWithOptions:(NSDictionary * _Nullable)launchOptions clientId:(NSString * _Nonnull)clientId projectId:(NSString * _Nonnull)projectId;

/// Sets the user profile specific to current user
///
/// Setting the user profile details helps in targeting users specific to a gender, age group or country.
/// This also enable to run user personalized campaigns across devices.
///
/// \param traits Instance of Traits class.
+ (void)identify:(Traits * _Nonnull)traits;

/// Logs app events to Engage. These events are used trigger campaigns, track app usage etc.
///
/// \param eventName name of the event
///
/// \param params Parameters of the event.
+ (void)track:(NSString * _Nonnull)eventName params:(NSDictionary * _Nonnull)params;

/// Enables or disables campaign dialogs in the app. Individual campaign dialogs may be handled separately by implementing registerForCampaignEvents.
///
/// Campaign dialogs are enabled by default
///
/// \param enabled use true or false based on whether to show campaigns or not.
+ (void)setCampaignDialogsEnabled:(BOOL)enabled;

/// Register to engageSDK PushNotification Campaign Pass deviceToken to engage SDK after registering for push notifications.
///
/// \param deviceToken deviceToken recieved from
/// func application(application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: NSData)
+ (void)registerForRemoteNotificationsWithDeviceToken:(NSData * _Nonnull)deviceToken;

/// Inform Engage SDK When a notification is recieved.
///
/// \param userInfo userInfo recieved from notification
///
/// \returns  This function will return an Instance of NotificationData if the notification recieved was from engage,
/// It will return a nil value if the notification is recieved from an unknown source.
+ (NotificationData * _Nullable)onNotificationRecieved:(NSDictionary * _Nonnull)userInfo;

/// Inform Engage SDK that the notification is Opened/Interacted by the user.
///
/// \param userInfo userInfo recieved from notification
///
/// \returns  This function will return an Instance of NotificationData if the notification recieved was from engage,
/// It will return a nil value if the notification is recieved from an unknown source.
+ (NotificationData * _Nullable)onNotificationOpened:(NSDictionary * _Nonnull)userInfo;

/// Shutdown the engage SDK. All functionalities related to SDK wil be stopped immediately after calling this method. Eg. It will clear all the user traits informations,stop tracking events, stops campaigns etc. Inorder to start the SDK functionality again , client application must call identify(traits : Traits) method.
+ (void)shutDown;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10engageCore14EngageCampaign")
@interface EngageCampaign : NSObject

/// The action string recieved from campaign
@property (nonatomic, copy) NSString * _Nullable actionString;

/// CampaignId of the current campaign
@property (nonatomic, copy) NSString * _Nullable campaignId;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface NSDate (SWIFT_EXTENSION(engageCore))
@end


SWIFT_CLASS("_TtC10engageCore16NotificationData")
@interface NotificationData : NSObject

/// CampaignId recieved from the notification
@property (nonatomic, readonly, copy) NSString * _Nullable campaignId;

/// Type of Content
@property (nonatomic, readonly, copy) NSString * _Nullable type;

/// ContentId of the content
@property (nonatomic, readonly, copy) NSString * _Nullable contentId;

/// Push Notification title recieved from userInfo dictionary
@property (nonatomic, readonly, copy) NSString * _Nullable title;

/// Push Notification subTitle recieved from userInfo dictionary
@property (nonatomic, readonly, copy) NSString * _Nullable subTitle;

/// Push Notification message recieved from userInfo dictionary
@property (nonatomic, readonly, copy) NSString * _Nullable message;

/// Bool value representing whether the campaign recieved is a preview campaign
@property (nonatomic, readonly) BOOL isCampaignPreview;

/// Campaign Id of preview campaign.
@property (nonatomic, readonly, copy) NSString * _Nullable campaignPreviewId;

/// Full notification dictionary.
@property (nonatomic, readonly, copy) NSDictionary * _Nullable notificationUserInfo;

/// Get instance of NotificationData from push notification userinfo dictionary.
///
/// \param remoteNotificationUserInfo userinfo dictionary recieved from notification
///
/// \returns  Instance of NotificationData
+ (NotificationData * _Nullable)getNotificationData:(NSDictionary * _Nonnull)remoteNotificationUserInfo;
@end


SWIFT_CLASS("_TtC10engageCore6Traits")
@interface Traits : NSObject

/// String representing user country name
@property (nonatomic, copy) NSString * _Nullable country;

/// emailID of user
@property (nonatomic, copy) NSString * _Nullable email;

/// String representing user city name
@property (nonatomic, copy) NSString * _Nullable city;

/// String representing user network
@property (nonatomic, copy) NSString * _Nullable network;

/// String name of user
@property (nonatomic, copy) NSString * _Nullable name;

/// String value representing registration Status of user.
@property (nonatomic, copy) NSString * _Nullable status;

/// String value representing UserID of user.
@property (nonatomic, copy) NSString * _Nullable id;

/// A [String : String] dictionary representing custom user prfile informations.
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nullable customTraits;
@end


@interface UIDevice (SWIFT_EXTENSION(engageCore))
@end


@interface UIViewController (SWIFT_EXTENSION(engageCore))
@end

#pragma clang diagnostic pop
